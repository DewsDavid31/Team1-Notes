
Our Source Code, pre-adjustments:
Types file: contains all the objects required for project
    Item class:
        items are stubbed currently, containing no code inside
    Holder class:
        Inventory containers, currently only stubbed
    Player:
        Built-in Holder is given as argument
        Currently creates a Room field without arguments
        No other functionality

    Room:
        Room to be used on map
        Has a parent map field, list of entrances and exits
        Also has a list of players currently inhabiting
        !! As a practice, entrances should only be entereed by players,while exits only 
                only used to be exited by players
    Path:
        Abstractly built to be the connection between a Room's pointers, such as doors
            Contains an entrance and exit Room
    Map:
        Actually map of rooms in the game, will contain all objects later on
            !! Currently only has a list of room objects

_Init_ File: Appears to only have version tag and author tag to add to program

_Main_: Appears to be the main launching file, running other programs and importing libraries

cli file: According to techtarget.com, is the Command Line Interface file that deals with extra arguments added by command line when starting the program

tests: The code appears to have assertion code for the existence of all object types currently existing
        as well as multiple instance of said objects in runtime.
        There are also tests that the CLI has a -h for help and the CLI exists in general
        
Notes on zork1:
what I like:
    Writing is impeccable
    Puzzling and fun
    Able to use many synonyms
    Consistently follows two word syntax
what I dislike:
    Has no description of syntax of commands
    Go to says got there but does nothing

what could be changed:
    Syntax could be explained through item on person?
    Some more synonyms could be added such as ran to or go to
    Some elements of the game become zany like the troll eating you lantern, maybe more sensical puzzles could be made?

6/12 In-class notes
    Smith   Will give us an API for the game in YAML form

    dictionaries    Python loves maps, I mean *cough* Dictionaries, most efficient in Python

    Approaches:     2d dictionary: Verbs:values -> objects: values

    Method-references:      Strength of Python Functional passing, methods are considered objects themselves
                                Ex: def foo(){} -> actually is a value, we can def bar(foo()){}
                                    Methods can be a value in a dictionary!!
                                        !! use instead of if/then/else!!
    Aliases:                Cannot use lists as keys
                                Method should deal with Aliases
    
    Non-functional requirements:    Performance, Real-time Performance, Maintainable, Modifiable, Readable, etc.
                                        Come on a scale unlike functional requirements

    Analysis
        Two kinds:
                
                1) static - stats on code before running -> sonarcloud/pylint/radon
                    linters, cyclomatic complexity(number of paths/ reading complexity), method length
                2) dynamic - stats on code while running -> spotbugs/valgrind/purify
                    We are not using dynamic during class
    
    Testing:
        1) Acceptance - Client requirements met
        2) Unit: method - TDD, test per method write before any code is written. Fail first then succeed
        3) Integration: class - Testing classes meshing together
        4) System - Testing entire system

    Unit Test: most important
        write test, make sure it fails, write enough to make it work
        If you can't write a test, don't write the code

            Implementation: requirements, design and process
                Bad implementation is a project crasher
                    Follow style of pep8!!
                        Pylint will notify, other tools will check
                            Naming: kramer's rules on Naming
                                !!avoid hungarian notation: using type in name!!
                            Tests: must be easy to run,50:50 code and test
                                Run quickly and a lot
                            Libraries: Use often, but cited
                                Use another library wherever possible
                            Reviews: very effective for improving capability
                                Knowing others look affects quality
                                Others know things you don't

    Agile: Emphasizes quick release cycles, allow changes in design on the fly
            
                            Also communication standards, book of style will help communicate
    Leadership vs. mgmt: mgmt finding strengths and weaknesses of team members and their ways to success, leadership find commonalities for unity of team and direction
        Mgmt is carrot, leadership is stick
            !!Both are needed in a team!!
6/18 notes:
	Too much - Our class will give us to much, like the real world does
	Sprint 3 user stories- one overlaps but posted
	Tech lead- deals with integration, reviews etc. less coding tasks
	Replaceability- To be a keepable member make code that allows you to be replaced
	Midtem - Scrum guide, 5 dystfunctions, design patterns, next week!!!
		OPEN BOOK/LAPTOP NO WIFI
		Trivia question- usually simpsons/futurama/rick n morty
	reviews - rank eachother hierachically, averaged upon collection of review for team function
		360- not a review, but rather a personal growth memo
		Abuse- firing the bottom is dysfunctional!!
			Actually skews population dysfunctionally!!
			Require rank order, but like comments
	Employee agreements - Always read,in-case of performance abuse
		!! You are allowed to strike out contract piece and send to hr!!
			!! applies to any legal document!!
	peter principle- everyone is promoted until incompetent	


	



