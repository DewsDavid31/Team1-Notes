
Our Source Code, pre-adjustments:
Types file: contains all the objects required for project
    Item class:
        items are stubbed currently, containing no code inside
    Holder class:
        Inventory containers, currently only stubbed
    Player:
        Built-in Holder is given as argument
        Currently creates a Room field without arguments
        No other functionality

    Room:
        Room to be used on map
        Has a parent map field, list of entrances and exits
        Also has a list of players currently inhabiting
        !! As a practice, entrances should only be entereed by players,while exits only 
                only used to be exited by players
    Path:
        Abstractly built to be the connection between a Room's pointers, such as doors
            Contains an entrance and exit Room
    Map:
        Actually map of rooms in the game, will contain all objects later on
            !! Currently only has a list of room objects

_Init_ File: Appears to only have version tag and author tag to add to program

_Main_: Appears to be the main launching file, running other programs and importing libraries

cli file: According to techtarget.com, is the Command Line Interface file that deals with extra arguments added by command line when starting the program

tests: The code appears to have assertion code for the existence of all object types currently existing
        as well as multiple instance of said objects in runtime.
        There are also tests that the CLI has a -h for help and the CLI exists in general
        
Notes on zork1:
what I like:
    Writing is impeccable
    Puzzling and fun
    Able to use many synonyms
    Consistently follows two word syntax
what I dislike:
    Has no description of syntax of commands
    Go to says got there but does nothing

what could be changed:
    Syntax could be explained through item on person?
    Some more synonyms could be added such as ran to or go to
    Some elements of the game become zany like the troll eating you lantern, maybe more sensical puzzles could be made?

6/12 In-class notes
    Smith   Will give us an API for the game in YAML form

    dictionaries    Python loves maps, I mean *cough* Dictionaries, most efficient in Python

    Approaches:     2d dictionary: Verbs:values -> objects: values

    Method-references:      Strength of Python Functional passing, methods are considered objects themselves
                                Ex: def foo(){} -> actually is a value, we can def bar(foo()){}
                                    Methods can be a value in a dictionary!!
                                        !! use instead of if/then/else!!
    Aliases:                Cannot use lists as keys
                                Method should deal with Aliases
    
    Non-functional requirements:    Performance, Real-time Performance, Maintainable, Modifiable, Readable, etc.
                                        Come on a scale unlike functional requirements

    Analysis
        Two kinds:
                
                1) static - stats on code before running -> sonarcloud/pylint/radon
                    linters, cyclomatic complexity(number of paths/ reading complexity), method length
                2) dynamic - stats on code while running -> spotbugs/valgrind/purify
                    We are not using dynamic during class
    
    Testing:
        1) Acceptance - Client requirements met
        2) Unit: method - TDD, test per method write before any code is written. Fail first then succeed
        3) Integration: class - Testing classes meshing together
        4) System - Testing entire system

    Unit Test: most important
        write test, make sure it fails, write enough to make it work
        If you can't write a test, don't write the code

            Implementation: requirements, design and process
                Bad implementation is a project crasher
                    Follow style of pep8!!
                        Pylint will notify, other tools will check
                            Naming: kramer's rules on Naming
                                !!avoid hungarian notation: using type in name!!
                            Tests: must be easy to run,50:50 code and test
                                Run quickly and a lot
                            Libraries: Use often, but cited
                                Use another library wherever possible
                            Reviews: very effective for improving capability
                                Knowing others look affects quality
                                Others know things you don't

    Agile: Emphasizes quick release cycles, allow changes in design on the fly
            
                            Also communication standards, book of style will help communicate
    Leadership vs. mgmt: mgmt finding strengths and weaknesses of team members and their ways to success, leadership find commonalities for unity of team and direction
        Mgmt is carrot, leadership is stick
            !!Both are needed in a team!!
6/18 notes:
	Too much - Our class will give us to much, like the real world does
	Sprint 3 user stories- one overlaps but posted
	Tech lead- deals with integration, reviews etc. less coding tasks
	Replaceability- To be a keepable member make code that allows you to be replaced
	Midtem - Scrum guide, 5 dystfunctions, design patterns, next week!!!
		OPEN BOOK/LAPTOP NO WIFI
		Trivia question- usually simpsons/futurama/rick n morty
	reviews - rank eachother hierachically, averaged upon collection of review for team function
		360- not a review, but rather a personal growth memo
		Abuse- firing the bottom is dysfunctional!!
			Actually skews population dysfunctionally!!
			Require rank order, but like comments
	Employee agreements - Always read,in-case of performance abuse
		!! You are allowed to strike out contract piece and send to hr!!
			!! applies to any legal document!!
	peter principle- everyone is promoted until incompetent	

6/24 in class notes:

	The Open/Close principle - Designs should be open for extension but not modification!!
		Allows usage, but protects encapsulation

	Decorators - Same super type as objects they decorate
			Can have 1+ more of their own (wrapping)
			Can be passed anywhere original could be
			Adds behavior before/after delegating
			Objects can be decorated at runtime
				!!JAVA can only do this through inheritance!!
					By extends {
				!!Python has duck typing, compares methods == then it is the same type, no inheritance needed!!
					Everything is an object in python
						Methods have __call__()
		Add additional responsibilities dynamically
		alternative alternative to sub-classing
			!!JAVA unfortunately requires inheritance to do this!!
				!!milk will extend coffee...lol!!
			JAVA I/O - essentially a stack of decorators on Reader.java
	Factory pattern- Was in vogue, but now is old-hat, build details of creation using subclassing are encapsulated
		Client doesn't care which type
		Can return a variety of things at runtime
		Can add types easily
		If static can't subtype to extend
		
		Considered a creational pattern
		Don't have to be abstract
		
	Dependency inversion princple - depend upon abstractions, do not depend upon concrete classes
		High-level modules should not depend on low-level modules
	!! No variable should hold a reference to a concrete class!!
	NO method should override an implemented method of any of its base classes
	Only derive from abstract classes
	
	Dependency injection - A technique where one object supplies dependencies for another object
	
		Dependency is a object that we can use
		Supplying a method the functionality it needs from outside!
			Using new services/classes is not allowed, but chosen
			Dependencies are gathered elsewhere by lower classes
			Done to decouple objects
			
		
				
				


	Inversion Of Control - A BUZZWORD, a design principle where custom-written portions of a progam recieve the flow of control from a generic framework
		Library vs framework: programmers call libraries, frameworks call you
			Framework- the housing/ usage of libraries
		Unlike traditional(custom calls libraries), framework calls custom code!!
		
	Abstract factory pattern - allows creating families of related objects decoupled
		abstract factory calls concrete factories to produce chosen product, from client's requested things from abstract product factory

		Abstract vs non
			non: inheritance in java, same family of type, not needing new
			abstract: composed seperately, made by new and passed
			
			** abstract factories are rarely used, not on test

	Singleton Pattern - Always get only one previously created object from factory
		I/O, Thread pools, drivers, preferences, dialog boxes etc.
			Allows lazy initialization
			
			private empty constructor prevents inheritance, or implementation
			doublecheck only one instanc by getter checking previous and calling its new
				usually called getInstance()
					can be made thread safe by synchronizing getInstance(), forcing thread blocking
						prevents race case collision
						but slower
		Only one instance with global access
		1. sync, what we did
		2. eager creation, use static creation before startup rule to create new member once, thread safe
		3.double-checking: 1, but check again before sync
	volatie -javas solution to cache sharing problem during threading, forces out to main memory for visibility to all threads and blocking register loading
		
	Visibility - assures all threads use the same variable
	Synchronization - Assures only one thread can write to a variable
	Atomic - changes to all volatile variables are seen in main memorym reads and writes are made atomic for all reference variables except long and double, no thread can use part-way
		Due to 64 bit in two registers
		!! if any variable is bundled in operations is volatile, all other ones are straightly written to memory by cache, weird behavior of java!!
				!! Don't do this shit in java, use scala to offload paralell things!!
		!!volatile will not work on ++ operator, multiple ops == multiple threads!!
	Recommended for OS Java Concurrency in practices helps with Java threading nastyness


6/26 notes:
	test:
		5 shortanswers on topics we have discussed conceptual
			ex: there are 3 phases of scrum, what are they called?
	Command pattern - A behavior design pattern where an object is used to encapsulate all the arguments/data for a later command

	Participants:
		CLient - creates a command and designates a reciever
		Invoker - holds command and at some point calls execute()
		Command - creates an interface with execute()
		Reciever - knows how to perform request
	caller -> command: execute()<- concreteCommand: state, execute()-> reciever <-client ---------------------------/^

		client is never notified, client doesn't know about processes of commands

	Adapter pattern- converts interface of one class into another
		connects, previously unusuable pairs of classes
		
		Two kinds:
			1) objects - composition based
			2) class - inheritance based
		parts:
			target- interface client calls
			Adapter has opertaion method calling adaptee, implemented on target
			Adaptee is called class/object
				object version will have adapter contain adaptee
				class's adapter will call adaptee
	Facade pattern- provides a unified interface to a set of interfaces in a subsystem
		called by client, calls specific interfaces, simplifies calling from client, adding more abstraction

	Difference between adapter- adapter modifies an interface for usability, facade combines interfaces

	Principle of Least Knowledge - Information of immediate relations should only be known
		Allows decoupling, easy imports
		Law of Demeter: methods may talk to
			their own object
			objects as params
			objects instantiated
			instance variables
	Template method- Behavioral pattern that defines the skeleton of an algorithmn and sending them on to subclasses
			Strategy pattern, but on algorithmn
			Based on divided out abstract class
		Recipes are a great example of this

	Hooks- an abstract method left behind in case other things interface
		overridden when used
	Hollywood principle- don't call us we'll call you, low level hooks into system, high level calls at appropriate time
		ex: Java Arrays.sort() calls compareTo() as strategies
	Template is final, parts call interfaces
		strategy->composition
		template->inheritance
		Factory is specialized template
Jul 1 2019:
	
	Iterator pattern - provides a way to traverse any collection, encapsulate the reader of said collectionso it doesn't care about typing/implementation
		Aggregate- an instance tht pulls iterator from list
		!!Enumeration has been replaced by iteration!!
		
	Single-responsibility rule - a module of code should only do one thing, and one thing very well!!

		Known as high-cohesion
			Can be measured by instance variable number(mutators)
			Lower, the better
	Composite pattern- allows you to make objects into tree form, allows trees to be treated like a whole object
		Recursion-efficient
		
	Aggregation- the finite conclusion of composite pattern of all possible children, methods and etc. yet only allowing certain usages in certain nodes
	
	State- the combination of the value of all the variables in an object

	state machines - very effective on saving memory
			Made by set of legal states that operate like a graph flow
	state pattern - allows an object to alter its behavior when its internal state changes
		Will appear to change its class
		Similar to strategy pattern, but using state at runtime
		Good alternative to subclassing with composition at runtime
		Alternative ot if/else forest
	big picture: Context sets state onn state interface, state calls concrete states

Getting a job:
	The great american know who:
		I've known people at jobs I have landed
		Knowledge of people is best -> networking
			1)Make a name for yourself in school
			2)Let networked you are looking for a job
			3)Maintain your GPA!!
			4)LINKED IN, relied on heavily
			5)MEETUPS, looked for in you hiring: in interest
			6)Twitter, unfortunately following on tabs of tech industry
		STOP
			1)gaming, detrimental to income, has no professionals, doesn't hone my crafts
			2)social media, same thing
			3)watching things, same thing because not crafting
			4)navel gazing/wasting time(amazingly valuable)
			5)Becoming an expert at unpayable things
		START
			1)Learning about field's state: ACM,IEEE
			2)Be relatable(smooth with laymen)
			3)Being sweet + professional
			4)Branching out languages(human + non) + Technology
		Reasons
			1) people are hired because willing to pay for solution
			2) Be that solution
		Before the job:
			1)research the workplace's history + business decisions
			2)research the competitors
			3)compile strengths + weaknesses of competitors + workplace
			4)check alignment of interests + morals
			5) check turnover rate
			6) check contracts and their questionable hiring states
				1.stock options are worthless
				2.promise of future is hard sell
				3.holding decision on hire is dicey
				4.shady wording of hiring rights avoid
		MARKET
			1) spin up cards
				a. non school email
				b. twitter, github, linkedin
			2) Github must include schoolwork
				a.have GISTS
				b.refactor and test old work and post
			3)Create a blog/GIST for the field maybe
				!!gists should be short!!
			4)Create/give a presentation or two of tech
			5)Write a paper or two of tech
				*could ask a professor to offload research
			6)Resume will be filtered by HR's buzzword matcher
				*5 seconds to catch reader's attention
				*important things first
				*look clean + glanceable
				!! Never put address at resume!! -suggests commute issues
				!! Don't use school email!!- suggests still collegiate
				!! Dont have cute email/github handle!! -suggests you are a dude bro
				*put in completion date of schooling
				!! don't put required classes, put in electives!!
				!! don't list IDE's!!
				!! don't mention .exe's!!
				!!DONT PUT IN objectives!!
					*trajectory is only for seasoned in cover letter
				*put in languages by experience
				*put in github and linked in
				*list substantial upper division work, here and on
				*list SCRUM,TDD, SONARCLOUD, TRAVIS-CI/CD, LINUX, put on scrum roles + job roles you have done !!!not!!! responsibility
				!! Keep resume to one page, +1 if seasoned!!
				!!Be very careful about spelling and grammar and formatting from now on!!
					!! NEVER WAFFLE FONT + FORMAT!!
				
		Your interview skills	
				1) start with phone screen
				2) online quiz skills
				3) plan for half-full day
				4) plan for group interview questions
				5) have strong table-manners
					!!helps interview lunches, coworkers!!


	July 3rd 2019
	DEMO DAY FIXES
		meetings must have an agenda and goal
		meetings must have a time limit 1-2hrs
		p.o. must update on surpirses
	Interviewing:
		Start with a phone screen
		Or a Quiz
		After on-site for 1/2-day or full-day
			Will be eating with a group usually
				Need table manners
					!!Don't order spaghetti lol!!
		Arrive 15 minutes early, but don't enter
		Bring a notepad, extra resumes
		!!Follow up after on the same day, say thanks and if you can help!!!
			Usually by email
		!! Dress well, Sport jacket usually, eye contact, don't cross appendages, lean in, avoid nervous habit, avoid too strong deode!!
		Interview them as well
			You don't want to work anywhere, unless resume building
			Checkout glassdoor
				With a grain of salt bimodality
			Ask about turnover + Why they work?
			What can I do while employed?
			Ask HR: benefits, retire + etc.
		Where a masters is needed: HIGH FIELDS -> machine learning, etc.		!! Join computer science group of MSU Denver!!
		Salary negotiation - we all have a salary range, but going above median, add in 'I deserve because'
			!! Be the last laugh, usually arm wrestles otherwise!!
			!! 6 months having no job is ok!!
			!! some places are worse than not working in field!!
			!! Need to explain gaps in resume but relevant because!!
	
			Avoid trailing edge tech, avoid area of no growth, churn+ burn
			To gain new tech, subscribe to ACM for leading edge research
			Following twitter of cs hotshots
			
		Dusty deck - legacy code that is too costly to update/not needed to update and certify
		

7/8 notes:
	
	Task planning:
		Splitting the cards, ex: I want rooms to hold item as well as player
			clarified: a room and a player must hold items
			break:
				1)Room holding items
				2)Player holding items
				Any refactoring?
				How many hours?
					Greater than 3, needs broken into subtasks
				1)Room holding items
				2a)Player contains list
				2b)Player can test for existance
				2c)PLayer can add()
				2d)Player can remove
					Clarified: unique or multiple same items?
					Customer: more swords
				1)Room holding items
				2)Player contains list: 2
				3)Player removal from list: 2
				4)Player tests for item exists: 3
					Debate on card size Room, 8<->3
					Delibrated to 13 <-> 8
					Broken up...
				1a)Test exist
				1b)test add
				1c)test remove
				1d)load yaml
				1e)save to room
				2)Player has list
				3)player test exist
				4)player add
				5)Player remove
					Customer: prefers save state mid-game fr
om player

					Clarified: save combined at item level	

					Spike: we don't know how items can save
					pause our sprint for spike budget
				1)Room Test exist: 3
				2)Room Test add: 2
				3)Room test remove: 2
				4) player test exist: 3
				5) player add: 2
				6) player remove: 2
				7) item can load:
				8) item can save:
				SPIKE)how saving/loading goes into item

					Spike reasearch becomes completed first
				then cards are broken down and picked
Class Notes:
		
	Interviewing continuted:
		What to ask:
			Why are you working here?
			What is the working conditions?
			What SE lifcycle is used?
				Waterfall
				AGILE: often impure
					Ask what parts?
					TDD?
			What is the toolchain?
			HR:
				What are the benefits?
				Health, vacation, retirement?
		What they ask:
			Computer Science principles:
				Algs and Datastructures
				Big O
				Imperitive vs functional
				internet has a compiled list
			What you have done:
				Specifics
				Concrete examples
				Say so if you don't have one
				Ready to talk about accomplishments on resume
					!! from STAR method of interview!!
				Languages
					When would you use an anonymous inner class in java?
					What is a lambda?
					What's a closure?
					!!AIM CORRECTLY ON KNOWLEDGE!!
				OO
					What are the big 4?
						Abstraction, Encapsulation, Inheritance, polymorphism
					What is an interface?
					What is a virtual method?
					What is multiple inheritance?
					Deep vs shallow copies?
					Dependency inversion/ control
					Difference between framework + library
					Design patterns
				SOLID-
					Single responsiblity
					Open-closed principle
					Liskov substitution principle
						objects should be replacable with instances of their subtype without changing code - interface not implement
					Inteface segregation principle
					Dependency Inversion Principle
				OS-
					Concurrency
						Thread vs Process
				Networks-
					ipv4/ipv6
					TCP vs UDP
					Client/server vs p2p
					cider..etc
				Software engineering-
					git, github
						rebase, squash
					agile manifesto
					tdd
					dry, yagni
					ci/cd
				Web-
					MVC
					ORM
					Ajax
		Questions:
			Tough Questions: Test under stress and bogus
				give process but you don't know
			Why are manhole covers round etc...
				looking for problem solving?
			Strengths and Weaknesses...count these etc...
				Know your stengths and weaknesses!!!
			Why do you want to work here?
				Get own creed/reason
		Verbal Hints:
			Speech is a part of thought, reflecting tones, feelings, etc.
			!!Don't say "I feel like" EVER!!
				Say "I think" or "I believe"
				Instinct is useless here
			!!Don't say "like" unless simile!!
			!!Remove "um", "you know" "got"NEVER!!
			!!Literally is useless!!
			!!Irregardless is not a word, ethan!!
			!!Don't say methodology!!
				use method/approach
			!!Data are plural, datum is singluar!!
			!!Avoid jokes!!
				Only on yourself
			!!Be terse!!
	Guerilla interviewing:
		Looking for smart people for things to be done
		Introduction
		Recent project you worked on
		Easy programming Quesiton
		Recrursion/Pointer question
		Any questions?
	!!Watch out for desperation in start-ups!!
	!!Bring a cheatsheet in-case!!
	Ask for feedback at the end!!
	Cracking the coding interview is a great resource, but dated
	Some jobs have no hiring, but interview anyway for perspective and fairness	
			
			
			
	Certification is great, meticulous is a bad resume strength

7/10:
	
	Effective java ch2 review:
		Consider Static factory vs constructors
			Parameters suck and lead to errors in overloading constructors
			Most languages only allow one constructor anyway
		Static factory can usually save resources by being singleton
		Basis of singleton, flyweights, non-instantiable
		Can return a subtype as well
		Polymorphic, can do interesting things
		Can be non-public
		Can vary implementation
		
		Service-Provider framework: inject dependency by passing a factory in order to have provider create wanted object
		java.util.serviceloader allows making api to factories in service loading framework
		
		Cons:
			Cannot be subclassed
			Not obvious in javadocs
			Many different naming conventions
				valueOf, getInstance, newInstance...
			!!Even java inner code is inconsistant on naming!!
		Telescoping is awful, but an approach
		
	Consider a builder when faced with multiple constructor parameters
		Create an empty instance and have many sets
		Builder pattern follows this
		build() should be parameterless
	Java 9 allows a type to extend itself in generics!!
	!!always use private final in instance variables!!

7/11:
	Prefer Dependency injection: insert our behavior from side-loading a behavior object or library
		Allows flexibility while not brittle
		Allows immutability
		Works for all instantiation methods
		Can pass a factory into a constructor
			This is how generics work
			Allows changed format in our code to still work
		Use DI frameworks
			what is DI?
				Dependency injection, often libraries are created to handle this
	Avoid creating unnecessary objects
		Use literals or valueOf() whenever possible
		Anything that is immutable
		Anything that is stateless like adapters
		use Boolean.valueOf() to not make a new true/false, because it is silly
		Factories are a godsend to this
			Pattern.compile is a costly state machine, using the same one will prove best
			Object computations are costly due to auto-boxing, avoid at all cost for performance
	Avoid memory leaking
		null out all unused refs
			this is because Java uses a reference counter garbage collector
			!!but should be unusually used!!
	Don't Finalizer ever ever ever
		finally of try//finally is a destructor, finalize is not
		Garbage collector almost never fills request
		!!always close files!!
		slow, not chained in order
		!!Create your own suggested close method!!
			Prefered approach is to implement AutoClosable interface
				implements close() method
				used with try-with-resources
				
Chapter 3: methods common to all objects
	often these methods default to a mess
	
	.equals is a pain in the butt
		Cannot be used when:
			unique/singleton
			Random
			Superclass does better(collections)
			Class is private and not used
				Suggest using an assertionerror
		.equals is not ==
			== is reference + typing
			.equals is content comparison
			test for equivalence, not the same object
			must follow:
				reflexive x.eq(x) == true
				symmetric x.eq(y) == y.eq(x)
				transitive x.eq(y) == y.eq(z) then x.eq(z)
		!!Arg must be Object o!!
		!!must use @Override!!
		!!only compare like and like!!
		!!cannot take a generic, but would solve the like and like situation!!
			Must be used if using map keys or sets
		Inheritance issues:
			comparing super values can turn non-symmetric on children because some contents will suddenly exist/vanish in children
			Extension always f's up .equals, don't do it including parents
			
							
